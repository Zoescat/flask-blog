from flask import Blueprint
from flask import request
from flask import Blueprint
from flask import render_template
from flask import redirect
from flask import url_for
from apps.user.models import User
from exts import db
import hashlib
from sqlalchemy import or_, and_, not_
import flask


user_bp = Blueprint('user', __name__)


# 注册
@user_bp.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        repassword = request.form.get('repassword')
        phone = request.form.get('phone')
        if password == repassword:
            # 与模型结合
            # 1.找到模型类，并创建对象
            user = User()
            # 2.给对象的属性赋值
            user.username = username
            user.password = hashlib.sha256(
                password.encode('utf-8')).hexdigest()
            user.phone = phone
            # 添加数据库
            # 3.将user对象添加到session中
            db.session.add(user)
            # 4.提交数据
            db.session.commit()
            # 重定向到用户中心
            return redirect(url_for('user.user_center'))
        else:
            return '两次密码不一致'

    return render_template('user/register.html')


# 登录
@user_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        # 关键
        new_password = hashlib.sha256(password.encode('utf-8')).hexdigest()
        # 查询，通过用户名查询用户
        user_list = User.query.filter_by(username=username)
        # 此时的user就是用户对象
        for user in user_list:
            if user.password == new_password:
                return '用户登录成功'
        else:
            return render_template('user/login.html', msg='用户名或密码错误！')

    return render_template('user/login.html')


# 查询
@user_bp.route('/select')
def user_select():
    user = User.query.get(1)  # get（主键值）-->根据主键查询用户,返回一个用户对象
    # 查询数据库中的数据
    # users = User.query.all()   # 相当于select * from userzx
    # print(users)   # [user_objectA,user_objectB...]
    user_list = User.query.filter(
        or_(User.username.like('J%'), User.username.contains('o'))).all()
    # => select * from user where username like 'J%' or username like '%e%'

    # user_list=User.query.filter(and_(User.username.like('J%'),User.rdatetime<'2021-10-17 19:28:56')).all()
    # => select * from user where username like 'J%' and rdatetime < '2021-10-17 19:28:56'

    # user_list=User.query.filter(not_(User.username.contains('J%')).all()
    # not_   表示非

    return render_template('user/select.html', user=user, users=user_list)


# 用户中心
@user_bp.route('/')
def user_center():
    # 查询数据库中的数据
    # 相当于select * from user
    user = User.query.filter(User.isdelete == False).all()
    # print(users)   # [user_objectA,user_objectB...]
    return render_template('user/center.html', users=user)


# 搜索
@user_bp.route('/search')
def search():
    keyword = request.args.get('search')  # 用户名或手机号
    # 查询
    user_list = User.query.filter(
        or_(User.username.contains(keyword), User.phone.contains(keyword))).all()

    return render_template('/user/center.html', users=user_list)


# 用户删除
@user_bp.route('/delete', endpoint='delete')
def user_delete():
    # 获取用户id
    id = request.args.get('id')
    # 1。逻辑删除（更新）
    # 获取该id的用户
    # user = User.query.get(id)
    # # 逻辑删除
    # user.isdelete = True
    # # 提交
    # db.session.commit()
    # 2.物理删除
    user = User.query.get(id)
    # 将对象放到缓存准备删除
    db.session.delete(user)
    db.session.commit()

    return redirect(url_for('user.user_center'))


# 用户信息更新
@user_bp.route('/update', endpoint='update', methods=['GET', 'POST'])
def user_update():
    if request.method == 'POST':
        username = request.form.get('username')
        phone = request.form.get('phone')
        id = request.form.get('id')
        # 找用户
        user = User.query.get(id)
        # 改用户信息
        user.phone = phone
        user.username = username
        # 提交
        db.session.commit()
        return redirect(url_for('user.user_center'))
    elif request.method=='GET':
        id = request.args.get('id')
        user = User.query.get(id)
        return render_template('user/update.html', user=user)
    else:
        return flask.Response(status=405)